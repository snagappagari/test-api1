trigger:
  - main  # Trigger the pipeline on commits to the 'main' branch

pool:
  name: MySelfHostedPool  # Your self-hosted agent pool

variables:
  imageName: 'test-api1'
  acrLoginServer: 'acrallnew.azurecr.io'
  tag: '$(Build.BuildId)'
  azureSubscription: 'sc-new'
  acrName: 'acrallnew'
  resourceGroup: 'devops-connection'
  aksCluster: 'aks-all'
  containerRegistry: '$(acrLoginServer)'
  dockerfilePath: './Dockerfile'
  kubernetesNamespace: 'default'
  deploymentFile: 'deployment.yaml'
  mavenOptions: '-DskipTests'

steps:

# Step 1: Checkout code
- checkout: self
  displayName: 'Checkout Code'

# Step 2: Build the project using Maven
- task: Maven@3
  displayName: 'Build the project with Maven'
  inputs:
    mavenPomFile: 'pom.xml'
    goals: 'clean package'
    options: '-DskipTests'
  env:
    JAVA_HOME: /usr/lib/jvm/java-21-openjdk-amd64
    PATH: /usr/lib/jvm/java-21-openjdk-amd64/bin:$(PATH)

# Step 3: Install Node.js
- task: NodeTool@0
  displayName: 'Install Node.js'
  inputs:
    versionSpec: '20.x'
    addToPath: true

# âœ… Step 4: Login to Azure Container Registry
- task: AzureCLI@2
  displayName: 'Login to Azure Container Registry'
  inputs:
    azureSubscription: $(azureSubscription)
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      az acr login --name $(acrName)

# Step 5: Build and push Docker image with multi-platform support
- script: |
    docker buildx create --use || true
    docker buildx build --platform linux/amd64,linux/arm64 \
      -t $(acrLoginServer)/$(imageName):$(tag) \
      -t $(acrLoginServer)/$(imageName):latest \
      --push .
  displayName: 'Build and Push Multi-Platform Docker Image to ACR'

# Step 6: Get AKS credentials
- task: AzureCLI@2
  displayName: 'Get AKS Credentials'
  inputs:
    azureSubscription: $(azureSubscription)
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      az aks get-credentials --resource-group $(resourceGroup) --name $(aksCluster)

# Step 7: Deploy to Kubernetes
- task: Kubernetes@1
  displayName: 'Deploy to Kubernetes (AKS)'
  inputs:
    connectionType: 'Azure Resource Manager'
    azureSubscriptionEndpoint: $(azureSubscription)
    azureResourceGroup: $(resourceGroup)
    kubernetesCluster: $(aksCluster)
    namespace: $(kubernetesNamespace)
    command: 'apply'
    useConfigurationFile: true
    configuration: $(deploymentFile)
